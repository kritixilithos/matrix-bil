{
	matlib = require("matrix")
	assignGlobal("testNumber", 0)
	assignGlobal("correctNumber", 0)
}

main {
	print "Starting tests"

	start = new matlib.Matrix(5, 5)
	temp = [0]*25
	assert((start.matrix = temp), "`constructor`")

	start.set(3, 4, -6.7)
	assert((start.get(3, 4) = -6.7), "`get`, `set`")

	a = new matlib.Matrix(10, 10)
	a.shape([seq(1, 10)])
	assert((a.getCol(5)=[6]*10), "`getCol`")
	assert((a.getRow(7)=[seq(1,10)]), "`getCol`")

	temp = [seq(1,10)]*10
	assert((a.matrix = temp), "`shape`")

	reduceBySum = a.reduceBy({|x,y|return x+y})
	temp = [55]*10
	assert((reduceBySum = temp), "`reduceBy`")

	temp = a.transpose()
	assert((temp.matrix = a.matrix), "`transpose`")
	temp.set(0, 0, -9)
	assert((a.get(0, 0) = 1), "`transpose`")

	/* multiplication table from 1 to 10 */
	b = a.vectorise({|a,b|return a*b}, a.transpose())
	assert((b.matrix=[1,2,3,4,5,6,7,8,9,10,2,4,6,8,10,12,14,16,18,20,3,6,9,12,15,18,21,24,27,30,4,8,12,16,20,24,28,32,36,40,5,10,15,20,25,30,35,40,45,50,6,12,18,24,30,36,42,48,54,60,7,14,21,28,35,42,49,56,63,70,8,16,24,32,40,48,56,64,72,80,9,18,27,36,45,54,63,72,81,90,10,20,30,40,50,60,70,80,90,100]), "`vectorise`")

	identityMatrix = new matlib.Matrix(10, 10)
	identityMatrix.shape([1]..[0]*10)
	doubleIdentityMatrix = identityMatrix.foreach({|x, y, v|return 0.5*v})
	temp = [seq(0,9)|doubleIdentityMatrix.get(_, _1)]
	assert((temp=[0.5]*10), "`foreach`")

	temp = b.submatrix([3,4], [6,7])
	assert((temp.matrix=[20,25,30,35,24,30,36,42,28,35,42,49,32,40,48,56]), "`submatrix`")

	temp = new matlib.Matrix(3, 4)
	temp.shape([seq(1, 3)])
	assert((temp.flip(dir=1).matrix=[3,1,2,3,2,3,1,2,1,2,3,1]), "`flip`")

	print "Tests finished"
	print correctNumber, "/", testNumber, " correct"
}

/* void assert(bool:boolean, err_msg:string) */
function assert(bool, err_msg) {
	testNumber++
	if[bool] do
		correctNumber++
	else
		errprint(testNumber..") "..err_msg.." failed\n")
	done
}
