record Matrix(rows, cols) {
	rows : integer = rows
	cols : integer = cols
	/* the matrix of the transpose is the same as the non-transpose
	/* but the indexing is different to improve efficiency */
	is_transpose:boolean = FALSE
	/* initialises with a zero matrix */
	/* stores matrix data as a 1D array */
	matrix : list = [0]*self.rows*self.cols

	/* BEGIN matrix operations */

	/* void shape(vals:list) */
	function shape(vals:list) {
		vals := enlist(vals)
		seq 0, rows*cols-1 | for i do
			self.matrix[i] = vals[i%#vals]
		done
	}

	/* Matrix transpose() */
	function transpose {
		res := self.clone()
		res.is_transpose = not self.is_transpose
		return res
	}

	/* Matrix submatrix(start:list<<integer>>, end:list<<integer>>) */
	function submatrix(start:list, end:list) {
		x1 := start[0]
		x2 := end[0]
		y1 := start[1]
		y2 := end[1]

		/* 0-indexed */
		unless[x1>0, x1<self.cols, x2>0, x2<self.cols, y1>0, y1<self.rows, y2>0, y2<self.rows] do
			error("Index error")
		done

		res := new Matrix(x2-x1+1, y2-y1+1)

		seq y1, y2 | for r do
			seq x1, x2 | for c do
				res.set(r-y1, c-x1, self.get(r, c))
			done
		done

		return res
	}

	/* Matrix flip(dir:integer=0) */
	function flip(dir:integer=0) {
		/* direction = 0 (horizontally), 1 (vertically) */
		error("Domain error") unless[dir = 0 or dir = 1]

		res := new Matrix(self.rows, self.cols)

		seq 0, self.rows-1 | for r do
			seq 0, self.cols-1 | for c do
				if[dir = 0] do
					res.set(r, c, self.get(r, self.cols-c-1))
				else
					res.set(r, c, self.get(self.rows-r-1, c))
				done
			done
		done

		return res
	}

	/* list<<floating>> reduceBy(func:function, dir:integer) */
	/* floating func(val1:floating, val2:floating) */
	function reduceBy(func:function, dir:integer=0) {
		/* direction = 0 (horizontally), 1 (vertically) */
		error("Domain error") unless[dir = 0 or dir = 1]

		/* TODO */
		if[dir = 0] do
			res := [
				for r in [seq(0, self.rows-1)] do
					[self.getRow(r)() | reduce func(_, _)]
				done
			]

			return res
		else
			res := [
				for c in [seq(0, self.cols-1)] do
					[self.getCol(c)() | reduce func(_, _)]
				done
			]

			return res
		done
	}

	/* Matrix foreach(func:function) */
	/* integer func(x:integer, y:integer, val:floating) */
	function foreach(func:function) {
		res := new Matrix(self.rows, self.cols)

		seq 0, self.rows-1 | for r do
			seq 0, self.cols-1 | for c do
				res.set(r, c, func(r, c, self.get(r, c)))
			done
		done

		return res
	}

	/* Matrix vectorise(func:function, mat:Matrix) */
	/* floating func(selfVal:floating, matVal:floating) */
	function vectorise(func:function, mat:Matrix) {
		error("Dimension error") unless[self.rows = mat.rows, self.cols = mat.cols]

		res := new Matrix(self.rows, self.cols)
		seq 0, self.rows-1 | for r do
			seq 0, self.cols-1 | for c do
				res.set(r, c, func(self.get(r, c), mat.get(r, c)))
			done
		done

		return res
	}

	/* END matrix operations */

	/* BEGIN math functions */

	/* Matrix mult(mat:Matrix) */
	function mult(mat:Matrix) {
		error("Dimension error") unless[self.cols = mat.rows]

		res := new Matrix(self.rows, mat.cols)
		seq 0, self.rows-1 | for r do
			seq 0, mat.cols-1 | for c do
				res.set(r, c, (seq(0, self.cols-1) | [self.get(r, _) * mat.get(_1, c)] | sum))
			done
		done

		return res
	}

	/* END math functions */

	/* BEGIN utility functions */

	/* floating get(y:integer, x:integer) */
	function get(y:integer, x:integer) {
		error("Index error") unless[x >= 0, x < self.cols, y >= 0, y < self.rows]

		if[self.is_transpose] do
			return self.matrix[x*self.cols + y]
		else
			return self.matrix[y*self.cols + x]
		done
	}

	/* list<<floating>> getRow(rowNumber:integer) */
	function getRow(rowNumber:integer) {
		error("Index error") unless[rowNumber >= 0, rowNumber < self.rows]

		if[self.is_transpose] do
			return self.matrix[rowNumber : self.rows*self.cols : self.cols]
		else
			return self.matrix[rowNumber*self.cols : rowNumber*self.cols+self.cols]
		done
	}

	/* list<<floating>> getCol(colNumber:integer) */
	function getCol(colNumber:integer) {
		error("Index error") unless[colNumber >= 0, colNumber < self.cols]

		if[self.is_transpose] do
			return self.matrix[colNumber*self.cols : colNumber*self.cols+self.cols]
		else
			return self.matrix[colNumber : self.rows*self.cols : self.cols]
		done
	}

	/* void set(y:integer, x:integer, val:floating) */
	function set(y:integer, x:integer, val) {
		error("Index error") unless[x >= 0, x < self.cols, y >= 0, y < self.rows]

		if[self.is_transpose] do
			self.matrix[x*self.cols + y] = val
		else
			self.matrix[y*self.cols + x] = val
		done
	}

	/* Matrix clone() */
	function clone() {
		res := new Matrix(self.rows, self.cols)
		res.is_transpose = self.is_transpose
		res.matrix = self.matrix[:]
		return res
	}

	/* END utility functions */
}

/* list enlist(nested_arr:list) */
/* list enlist(nested_arr:floating) */
function enlist nested_arr {
	res:=[]
	if[isFloat(nested_arr)] do
		res += nested_arr
	else
		error("Type error") unless[nested_arr is list]
		/* assuming nested_arr is an array */
		nested_arr() | res .= enlist(_)
	done
	return res
}

/* boolean isFloat(val) */
function isFloat val {
	return val is integer or val is floating
}

post_load: {
	exportType("Matrix")
}
